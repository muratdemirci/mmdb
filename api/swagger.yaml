openapi: 3.0.0
info:
    title: Murat Movie Database Api
    description: Node.js + MongoDB - API with  everything
    version: 1.0.0

servers:
    - url: http://localhost:8080
      description: Local development server

paths:
    /users/authenticate:
        post:
            summary: Authenticate user credentials and return a JWT token and a cookie with a refresh token
            description: Users must be verified before authenticating.
            operationId: authenticate
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                email:
                                    type: string
                                    example: 'murat@example.com'
                                password:
                                    type: string
                                    example: 'pass123'
                            required:
                                - email
                                - password
            responses:
                '200':
                    description: User details, a JWT access token and a refresh token cookie
                    headers:
                        Set-Cookie:
                            description: '`refreshToken`'
                            schema:
                                type: string
                                example: refreshToken=51872eca5efedcf424db4cf5afd16a9d00ad25b743a034c9c221afc85d18dcd5e4ad6e3f08607550; Path=/; Expires=Tue, 16 Jun 2020 09:14:17 GMT; HttpOnly
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    id:
                                        type: string
                                        example: '5eb12e197e06a76ccdefc121'
                                    email:
                                        type: string
                                        example: 'murat@example.com'
                                    role:
                                        type: string
                                        example: 'Admin'
                                    created:
                                        type: string
                                        example: '2020-05-05T09:12:57.848Z'
                                    isVerified:
                                        type: boolean
                                        example: true
                                    jwtToken:
                                        type: string
                                        example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1ZWIxMmUxOTdlMDZhNzZjY2RlZmMxMjEiLCJpZCI6IjVlYjEyZTE5N2UwNmE3NmNjZGVmYzEyMSIsImlhdCI6MTU4ODc1ODE1N30.xR9H0STbFOpSkuGA9jHNZOJ6eS7umHHqKRhI807YT1Y'
                '400':
                    description: The email or password is incorrect
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                        example: 'Email or password is incorrect'
    /users/refresh-token:
        post:
            summary: Use a refresh token to generate a new JWT token and a new refresh token
            description: The refresh token is sent and returned via cookies.
            operationId: refreshToken
            parameters:
                - in: cookie
                  name: refreshToken
                  description: The `refreshToken` cookie
                  schema:
                      type: string
                      example: 51872eca5efedcf424db4cf5afd16a9d00ad25b743a034c9c221afc85d18dcd5e4ad6e3f08607550
            responses:
                '200':
                    description: User details, a JWT access token and a new refresh token cookie
                    headers:
                        Set-Cookie:
                            description: '`refreshToken`'
                            schema:
                                type: string
                                example: refreshToken=51872eca5efedcf424db4cf5afd16a9d00ad25b743a034c9c221afc85d18dcd5e4ad6e3f08607550; Path=/; Expires=Tue, 16 Jun 2020 09:14:17 GMT; HttpOnly
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    id:
                                        type: string
                                        example: '5eb12e197e06a76ccdefc121'
                                    email:
                                        type: string
                                        example: 'murat@example.com'
                                    role:
                                        type: string
                                        example: 'Admin'
                                    created:
                                        type: string
                                        example: '2020-05-05T09:12:57.848Z'
                                    isVerified:
                                        type: boolean
                                        example: true
                                    jwtToken:
                                        type: string
                                        example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1ZWIxMmUxOTdlMDZhNzZjY2RlZmMxMjEiLCJpZCI6IjVlYjEyZTE5N2UwNmE3NmNjZGVmYzEyMSIsImlhdCI6MTU4ODc1ODE1N30.xR9H0STbFOpSkuGA9jHNZOJ6eS7umHHqKRhI807YT1Y'
                '400':
                    description: The refresh token is invalid, revoked or expired
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                        example: 'Invalid token'
    /users/revoke-token:
        post:
            summary: Revoke a refresh token
            description: Admin can revoke the tokens of any user, regular users can only revoke their own tokens.
            operationId: revokeToken
            security:
                - bearerAuth: []
            parameters:
                - in: cookie
                  name: refreshToken
                  description: The refresh token can be sent in a cookie or the post body, if both are sent the token in the body is used.
                  schema:
                      type: string
                      example: 51872eca5efedcf424db4cf5afd16a9d00ad25b743a034c9c221afc85d18dcd5e4ad6e3f08607550
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                token:
                                    type: string
                                    example: '51872eca5efedcf424db4cf5afd16a9d00ad25b743a034c9c221afc85d18dcd5e4ad6e3f08607550'
            responses:
                '200':
                    description: The refresh token was successfully revoked
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                        example: 'Token revoked'
                '400':
                    description: The refresh token is invalid
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                        example: 'Invalid token'
                '401':
                    $ref: '#/components/responses/UnauthorizedError'
    /users/register:
        post:
            summary: Register a new user and send a verification email
            description: The first user registered in the system is assigned the `Admin` role, other users are assigned the `User` role.
            operationId: register
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                email:
                                    type: string
                                    example: 'murat@example.com'
                                password:
                                    type: string
                                    example: 'pass123'
                                confirmPassword:
                                    type: string
                                    example: 'pass123'
                                acceptTerms:
                                    type: boolean
                            required:
                                - email
                                - password
                                - confirmPassword
                                - acceptTerms
            responses:
                '200':
                    description: The registration request was successful and a verification email has been sent to the specified email address
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                        example: 'Registration successful, please check your email for verification instructions'
    /users/verify-email:
        post:
            summary: Verify a new user with a verification token received by email after registration
            operationId: verifyEmail
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                token:
                                    type: string
                                    example: '3c7f8d9c4cb348ff95a0b74a1452aa24fc9611bb76768bb9eafeeb826ddae2935f1880bc7713318f'
                            required:
                                - token
            responses:
                '200':
                    description: Verification was successful so you can now login to the user
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                        example: 'Verification successful, you can now login'
                '400':
                    description: Verification failed due to an invalid token
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                        example: 'Verification failed'
    /users/forgot-password:
        post:
            summary: Submit email address to reset the password on an user
            operationId: forgotPassword
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                email:
                                    type: string
                                    example: 'murat@example.com'
                            required:
                                - email
            responses:
                '200':
                    description: The request was received and an email has been sent to the specified address with password reset instructions (if the email address is associated with an user)
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                        example: 'Please check your email for password reset instructions'
    /users/validate-reset-token:
        post:
            summary: Validate the reset password token received by email after submitting to the /users/forgot-password route
            operationId: validateResetToken
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                token:
                                    type: string
                                    example: '3c7f8d9c4cb348ff95a0b74a1452aa24fc9611bb76768bb9eafeeb826ddae2935f1880bc7713318f'
                            required:
                                - token
            responses:
                '200':
                    description: Token is valid
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                        example: 'Token is valid'
                '400':
                    description: Token is invalid
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                        example: 'Invalid token'
    /users/reset-password:
        post:
            summary: Reset the password for an user
            operationId: resetPassword
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                token:
                                    type: string
                                    example: '3c7f8d9c4cb348ff95a0b74a1452aa24fc9611bb76768bb9eafeeb826ddae2935f1880bc7713318f'
                                password:
                                    type: string
                                    example: 'newPass123'
                                confirmPassword:
                                    type: string
                                    example: 'newPass123'
                            required:
                                - token
                                - password
                                - confirmPassword
            responses:
                '200':
                    description: Password reset was successful so you can now login with the new password
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                        example: 'Password reset successful, you can now login'
                '400':
                    description: Password reset failed due to an invalid token
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                        example: 'Invalid token'
    /users:
        get:
            summary: Get a list of all users
            description: Restricted to admin users.
            operationId: getAllUsers
            security:
                - bearerAuth: []
            responses:
                '200':
                    description: An array of all users
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    type: object
                                    properties:
                                        id:
                                            type: string
                                            example: '5eb12e197e06a76ccdefc121'
                                        email:
                                            type: string
                                            example: 'murat@example.com'
                                        role:
                                            type: string
                                            example: 'Admin'
                                        created:
                                            type: string
                                            example: '2020-05-05T09:12:57.848Z'
                                        updated:
                                            type: string
                                            example: '2020-05-08T03:11:21.553Z'
                '401':
                    $ref: '#/components/responses/UnauthorizedError'
        post:
            summary: Create a new user
            description: Restricted to admin users.
            operationId: createUser
            security:
                - bearerAuth: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                email:
                                    type: string
                                    example: 'murat@example.com'
                                password:
                                    type: string
                                    example: 'pass123'
                                confirmPassword:
                                    type: string
                                    example: 'pass123'
                                role:
                                    type: string
                                    enum: [Admin, User]
                            required:
                                - email
                                - password
                                - confirmPassword
                                - role
            responses:
                '200':
                    description: User created successfully, verification is not required for users created with this endpoint. The details of the new user are returned.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    id:
                                        type: string
                                        example: '5eb12e197e06a76ccdefc121'
                                    email:
                                        type: string
                                        example: 'murat@example.com'
                                    role:
                                        type: string
                                        example: 'Admin'
                                    created:
                                        type: string
                                        example: '2020-05-05T09:12:57.848Z'
                '400':
                    description: Email is already registered
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                        example: "Email 'murat@example.com' is already registered"
                '401':
                    $ref: '#/components/responses/UnauthorizedError'
    /users/{id}:
        parameters:
            - in: path
              name: id
              description: User id
              required: true
              example: '5eb12e197e06a76ccdefc121'
              schema:
                  type: string
        get:
            summary: Get a single user by id
            description: Admin can access any user, regular users are restricted to their own account.
            operationId: getUserById
            security:
                - bearerAuth: []
            responses:
                '200':
                    description: Details of the specified user
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    id:
                                        type: string
                                        example: '5eb12e197e06a76ccdefc121'
                                    email:
                                        type: string
                                        example: 'jason@example.com'
                                    role:
                                        type: string
                                        example: 'Admin'
                                    created:
                                        type: string
                                        example: '2020-05-05T09:12:57.848Z'
                                    updated:
                                        type: string
                                        example: '2020-05-08T03:11:21.553Z'
                '404':
                    $ref: '#/components/responses/NotFoundError'
                '401':
                    $ref: '#/components/responses/UnauthorizedError'
        put:
            summary: Update an user
            description: Admin can update any user including role, regular users are restricted to their own account and cannot update role.
            operationId: updateUser
            security:
                - bearerAuth: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                email:
                                    type: string
                                    example: 'murat@example.com'
                                password:
                                    type: string
                                    example: 'pass123'
                                confirmPassword:
                                    type: string
                                    example: 'pass123'
                                role:
                                    type: string
                                    enum: [Admin, User]
            responses:
                '200':
                    description: User updated successfully. The details of the updated user are returned.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    id:
                                        type: string
                                        example: '5eb12e197e06a76ccdefc121'
                                    email:
                                        type: string
                                        example: 'murat@example.com'
                                    role:
                                        type: string
                                        example: 'Admin'
                                    created:
                                        type: string
                                        example: '2020-05-05T09:12:57.848Z'
                                    updated:
                                        type: string
                                        example: '2020-05-08T03:11:21.553Z'
                '404':
                    $ref: '#/components/responses/NotFoundError'
                '401':
                    $ref: '#/components/responses/UnauthorizedError'
        delete:
            summary: Delete an user
            description: Admin can delete any user, regular users are restricted to their own account.
            operationId: deleteUser
            security:
                - bearerAuth: []
            responses:
                '200':
                    description: User deleted successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                        example: 'User deleted successfully'
                '404':
                    $ref: '#/components/responses/NotFoundError'
                '401':
                    $ref: '#/components/responses/UnauthorizedError'

components:
    securitySchemes:
        bearerAuth:
            type: http
            scheme: bearer
            bearerFormat: JWT
    responses:
        UnauthorizedError:
            description: Access token is missing or invalid, or the user does not have access to perform the action
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            message:
                                type: string
                                example: 'Unauthorized'
        NotFoundError:
            description: Not Found
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            message:
                                type: string
                                example: 'Not Found'
